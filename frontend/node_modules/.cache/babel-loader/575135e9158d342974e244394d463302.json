{"ast":null,"code":"var _jsxFileName = \"/Users/jokizi/Documents/GitHub/BrunettiJoris_7_27052021/frontend/src/components/ModifyComment/ModifyComment.js\",\n    _s = $RefreshSig$();\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport api from \"../../Config/Api\";\nimport { useState } from \"react\";\nimport ModifCommentPopUp from \"../ModifCommentPopUp/ModifCommentPopUP\";\nimport { toastTrigger } from \"../../helper/toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ModifyComment = ({\n  myUserId,\n  idUserComment,\n  commentId,\n  content,\n  messageId,\n  setAllComments\n}) => {\n  _s();\n\n  const [open, setOpen] = useState(false);\n  const [newContent, setNewContent] = useState(content);\n\n  const handleModal = () => {\n    setOpen(!open);\n  };\n\n  const onUpdate = async () => {\n    const token = JSON.parse(JSON.stringify(sessionStorage.getItem(\"groupomania-token\")));\n    const obj = {\n      content: newContent\n    };\n\n    if (content === newContent || newContent === \"\") {\n      toastTrigger(\"error\", \"Le commentaire n'a pas été modifié\");\n      setOpen(false);\n      return;\n    }\n\n    try {\n      await api({\n        url: commentId + \"/comment/update\",\n        method: \"put\",\n        data: obj,\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: \"application/json\"\n        }\n      });\n      setOpen(false);\n\n      try {\n        const response = await api({\n          url: \"/\" + messageId + \"/comments\",\n          method: \"get\",\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setAllComments(response.data);\n        toastTrigger(\"success\", \"Commentaire modifié 👌🏼\");\n      } catch (error) {}\n    } catch (error) {\n      toastTrigger(\"error\", \"Une erreur est survenue ⛔️\");\n    }\n  };\n\n  const onChangeContent = e => {\n    setNewContent(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [myUserId === idUserComment && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modify-icon\",\n      onClick: handleModal,\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        color: \"blue\",\n        icon: [\"far\", \"edit\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), \" modifier\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ModifCommentPopUp, {\n      open: open,\n      onChange: onChangeContent,\n      handleModal: handleModal,\n      onUpdate: onUpdate,\n      modalTitle: \"Modifier votre commentaire\",\n      buttonTitle1: \"Sauvegarder Modifications\",\n      buttonTitle2: \"Annuler Modifications\",\n      newContent: newContent,\n      setNewContent: setNewContent,\n      label: \"Modifier commentaire\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ModifyComment, \"hV1ZVBGqqkE4MaoFjKyZuhk7Ayw=\");\n\n_c = ModifyComment;\nexport default ModifyComment;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModifyComment\");","map":{"version":3,"sources":["/Users/jokizi/Documents/GitHub/BrunettiJoris_7_27052021/frontend/src/components/ModifyComment/ModifyComment.js"],"names":["FontAwesomeIcon","api","useState","ModifCommentPopUp","toastTrigger","ModifyComment","myUserId","idUserComment","commentId","content","messageId","setAllComments","open","setOpen","newContent","setNewContent","handleModal","onUpdate","token","JSON","parse","stringify","sessionStorage","getItem","obj","url","method","data","headers","Authorization","Accept","response","error","onChangeContent","e","target","value"],"mappings":"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","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport api from \"../../Config/Api\";\nimport { useState } from \"react\";\nimport ModifCommentPopUp from \"../ModifCommentPopUp/ModifCommentPopUP\";\nimport { toastTrigger } from \"../../helper/toast\";\n\nconst ModifyComment = ({ myUserId, idUserComment, commentId, content, messageId, setAllComments }) => {\n  const [open, setOpen] = useState(false);\n  const [newContent, setNewContent] = useState(content);\n\n  const handleModal = () => {\n    setOpen(!open);\n  };\n  const onUpdate = async () => {\n    const token = JSON.parse(JSON.stringify(sessionStorage.getItem(\"groupomania-token\")));\n    const obj = { content: newContent };\n    if (content === newContent || newContent === \"\") {\n      toastTrigger(\"error\", \"Le commentaire n'a pas été modifié\");\n      setOpen(false);\n      return;\n    }\n    try {\n      await api({\n        url: commentId + \"/comment/update\",\n        method: \"put\",\n        data: obj,\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: \"application/json\",\n        },\n      });\n      setOpen(false);\n      try {\n        const response = await api({\n          url: \"/\" + messageId + \"/comments\",\n          method: \"get\",\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        setAllComments(response.data);\n        toastTrigger(\"success\", \"Commentaire modifié 👌🏼\");\n      } catch (error) {}\n    } catch (error) {\n      toastTrigger(\"error\", \"Une erreur est survenue ⛔️\");\n    }\n  };\n  const onChangeContent = (e) => {\n    setNewContent(e.target.value);\n  };\n\n  return (\n    <div>\n      {myUserId === idUserComment && (\n        <div className=\"modify-icon\" onClick={handleModal}>\n          <FontAwesomeIcon color=\"blue\" icon={[\"far\", \"edit\"]} /> modifier\n        </div>\n      )}\n      <ModifCommentPopUp\n        open={open}\n        onChange={onChangeContent}\n        handleModal={handleModal}\n        onUpdate={onUpdate}\n        modalTitle=\"Modifier votre commentaire\"\n        buttonTitle1=\"Sauvegarder Modifications\"\n        buttonTitle2=\"Annuler Modifications\"\n        newContent={newContent}\n        setNewContent={setNewContent}\n        label=\"Modifier commentaire\"\n      />\n    </div>\n  );\n};\nexport default ModifyComment;\n"]},"metadata":{},"sourceType":"module"}