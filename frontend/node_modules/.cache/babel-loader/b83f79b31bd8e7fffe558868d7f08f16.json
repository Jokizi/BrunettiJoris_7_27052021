{"ast":null,"code":"var _jsxFileName = \"/Users/jokizi/Documents/GitHub/BrunettiJoris_7_27052021/frontend/src/components/App/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport Header from \"../Header/Header\";\nimport Footer from \"../Footer/Footer\";\nimport Login from \"../../container/Login/Login\";\nimport Register from \"../../container/Register/Register\";\nimport Home from \"../../container/Home/Home\";\nimport Landing from \"../../container/Landing/Landing\";\nimport UserProfil from \"../../container/UserProfil/UserProfil\";\nimport OtherProfil from \"../../container/OtherProfil/OtherProfil\";\nimport PrivateRoute from \"../PrivateRoute/PrivateRoute\";\nimport api from \"../../Config/Api\";\nimport \"../../assets/fontawesome\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"./app.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [isLoggedin, setIsLoggedin] = useState(false);\n  const [checkLogin, setCheckLogin] = useState(false);\n  const [myUserId, setMyUserId] = useState(\"\");\n  const [admin, setAdmin] = useState(false);\n  useEffect(() => {\n    const token = JSON.parse(JSON.stringify(sessionStorage.getItem(\"groupomania-token\")));\n\n    if (!isLoggedin && token) {\n      const getUser = async () => {\n        try {\n          const response = await api({\n            url: \"/users/profile/\",\n            method: \"get\",\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          setMyUserId(response.data.id);\n          setAdmin(response.data.isAdmin);\n          setIsLoggedin(true);\n          setCheckLogin(true);\n        } catch (error) {\n          setCheckLogin(true);\n        }\n      };\n\n      getUser();\n    } else {\n      setCheckLogin(true);\n    }\n  }, [isLoggedin]);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      isLoggedin: isLoggedin,\n      setIsLoggedin: setIsLoggedin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [checkLogin && /*#__PURE__*/_jsxDEV(PrivateRoute, {\n          exact: true,\n          path: \"/accueil\",\n          myUserId: myUserId,\n          admin: admin,\n          component: Home,\n          isLoggedin: isLoggedin,\n          setAdmin: setAdmin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), checkLogin && /*#__PURE__*/_jsxDEV(PrivateRoute, {\n          exact: true,\n          path: \"/profil\",\n          myUserId: myUserId,\n          admin: admin,\n          component: UserProfil,\n          setIsLoggedin: setIsLoggedin,\n          isLoggedin: isLoggedin,\n          setCheckLogin: setCheckLogin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), checkLogin && /*#__PURE__*/_jsxDEV(PrivateRoute, {\n          exact: true,\n          path: \"/utilisateur/profil\",\n          myUserId: myUserId,\n          admin: admin,\n          component: OtherProfil,\n          setIsLoggedin: setIsLoggedin,\n          isLoggedin: isLoggedin,\n          setCheckLogin: setCheckLogin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          render: () => isLoggedin ? /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/accueil\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Landing, {\n            setIsLoggedin: setIsLoggedin,\n            isLoggedin: isLoggedin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/connexion\",\n          render: () => isLoggedin ? /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/accueil\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Login, {\n            setMyUserId: setMyUserId,\n            setAdmin: setAdmin,\n            setIsLoggedin: setIsLoggedin,\n            isLoggedin: isLoggedin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/inscription\",\n          render: () => isLoggedin ? /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/accueil\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Register, {\n            setIsLoggedin: setIsLoggedin,\n            isLoggedin: isLoggedin,\n            setMyUserId: setMyUserId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"oaa6lcVp0+Pmr8Zkid9C6NdHf64=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jokizi/Documents/GitHub/BrunettiJoris_7_27052021/frontend/src/components/App/App.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Switch","Route","Redirect","Header","Footer","Login","Register","Home","Landing","UserProfil","OtherProfil","PrivateRoute","api","ToastContainer","App","isLoggedin","setIsLoggedin","checkLogin","setCheckLogin","myUserId","setMyUserId","admin","setAdmin","token","JSON","parse","stringify","sessionStorage","getItem","getUser","response","url","method","headers","Authorization","data","id","isAdmin","error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport Header from \"../Header/Header\";\nimport Footer from \"../Footer/Footer\";\nimport Login from \"../../container/Login/Login\";\nimport Register from \"../../container/Register/Register\";\nimport Home from \"../../container/Home/Home\";\nimport Landing from \"../../container/Landing/Landing\";\nimport UserProfil from \"../../container/UserProfil/UserProfil\";\nimport OtherProfil from \"../../container/OtherProfil/OtherProfil\";\nimport PrivateRoute from \"../PrivateRoute/PrivateRoute\";\nimport api from \"../../Config/Api\";\nimport \"../../assets/fontawesome\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"./app.css\";\n\nconst App = () => {\n  const [isLoggedin, setIsLoggedin] = useState(false);\n  const [checkLogin, setCheckLogin] = useState(false);\n  const [myUserId, setMyUserId] = useState(\"\");\n  const [admin, setAdmin] = useState(false);\n\n  useEffect(() => {\n    const token = JSON.parse(JSON.stringify(sessionStorage.getItem(\"groupomania-token\")));\n\n    if (!isLoggedin && token) {\n      const getUser = async () => {\n        try {\n          const response = await api({\n            url: \"/users/profile/\",\n            method: \"get\",\n            headers: { Authorization: `Bearer ${token}` },\n          });\n          setMyUserId(response.data.id);\n          setAdmin(response.data.isAdmin);\n          setIsLoggedin(true);\n          setCheckLogin(true);\n        } catch (error) {\n          setCheckLogin(true);\n        }\n      };\n      getUser();\n    } else {\n      setCheckLogin(true);\n    }\n  }, [isLoggedin]);\n\n  return (\n    <Router>\n      <Header isLoggedin={isLoggedin} setIsLoggedin={setIsLoggedin} />\n      <div className=\"main-container\">\n        <Switch>\n          {checkLogin && (\n            <PrivateRoute\n              exact\n              path=\"/accueil\"\n              myUserId={myUserId}\n              admin={admin}\n              component={Home}\n              isLoggedin={isLoggedin}\n              setAdmin={setAdmin}\n            />\n          )}\n          {checkLogin && (\n            <PrivateRoute\n              exact\n              path=\"/profil\"\n              myUserId={myUserId}\n              admin={admin}\n              component={UserProfil}\n              setIsLoggedin={setIsLoggedin}\n              isLoggedin={isLoggedin}\n              setCheckLogin={setCheckLogin}\n            />\n          )}\n          {checkLogin && (\n            <PrivateRoute\n              exact\n              path=\"/utilisateur/profil\"\n              myUserId={myUserId}\n              admin={admin}\n              component={OtherProfil}\n              setIsLoggedin={setIsLoggedin}\n              isLoggedin={isLoggedin}\n              setCheckLogin={setCheckLogin}\n            />\n          )}\n          <Route\n            exact\n            path=\"/\"\n            render={() =>\n              isLoggedin ? (\n                <Redirect to=\"/accueil\" />\n              ) : (\n                <Landing setIsLoggedin={setIsLoggedin} isLoggedin={isLoggedin} />\n              )\n            }\n          ></Route>\n          <Route\n            exact\n            path=\"/connexion\"\n            render={() =>\n              isLoggedin ? (\n                <Redirect to=\"/accueil\" />\n              ) : (\n                <Login\n                  setMyUserId={setMyUserId}\n                  setAdmin={setAdmin}\n                  setIsLoggedin={setIsLoggedin}\n                  isLoggedin={isLoggedin}\n                />\n              )\n            }\n          ></Route>\n          <Route\n            exact\n            path=\"/inscription\"\n            render={() =>\n              isLoggedin ? (\n                <Redirect to=\"/accueil\" />\n              ) : (\n                <Register setIsLoggedin={setIsLoggedin} isLoggedin={isLoggedin} setMyUserId={setMyUserId} />\n              )\n            }\n          ></Route>\n        </Switch>\n      </div>\n      <Footer />\n      <ToastContainer />\n    </Router>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}